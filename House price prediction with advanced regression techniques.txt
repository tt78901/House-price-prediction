import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

# Step 1: Load the Data
train_df = pd.read_csv('/mnt/data/train.csv')
test_df = pd.read_csv('/mnt/data/test.csv')

# Display the first few rows of the training data
print("Train Data:")
print(train_df.head())

print("\nTest Data:")
print(test_df.head())

# Step 2: Basic Data Exploration
# Check for missing values
missing_values = train_df.isnull().sum().sort_values(ascending=False)
print("\nMissing Values in Train Data:")
print(missing_values[missing_values > 0])

# Summary statistics
print("\nSummary Statistics for Train Data:")
print(train_df.describe())

# Step 3: Data Preprocessing
# Fill missing values with median for numerical features
train_df.fillna(train_df.median(), inplace=True)
test_df.fillna(test_df.median(), inplace=True)

# Fill missing values with mode for categorical features
for column in train_df.select_dtypes(include=['object']).columns:
    train_df[column].fillna(train_df[column].mode()[0], inplace=True)
    test_df[column].fillna(test_df[column].mode()[0], inplace=True)

# Encode categorical variables
label_encoders = {}
for column in train_df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    train_df[column] = le.fit_transform(train_df[column])
    test_df[column] = le.transform(test_df[column])
    label_encoders[column] = le

# Step 4: Feature Selection and Model Training
# Define features and target
X = train_df.drop(columns=['Id', 'SalePrice'])
y = np.log(train_df['SalePrice'])  # Taking log to match evaluation metric

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on the validation set
y_val_pred = model.predict(X_val)

# Calculate RMSE on the validation set
rmse = np.sqrt(mean_squared_error(y_val, y_val_pred))
print(f'\nValidation RMSE: {rmse}')

# Step 5: Make Predictions on Test Data
# Predict on the test data
X_test = test_df.drop(columns=['Id'])
test_predictions = np.exp(model.predict(X_test))  # Inverse log transform

# Create a submission file
submission_df = pd.DataFrame({'Id': test_df['Id'], 'SalePrice': test_predictions})
submission_df.to_csv('/mnt/data/submission.csv', index=False)

print("\nSubmission file created at '/mnt/data/submission.csv'")
